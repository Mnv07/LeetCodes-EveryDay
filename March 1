2 pointers : remove elements questions: 

Approach : keep two pointers l,r with l keeping track of the unique element indices and r comparing each prev and curr val
and comparing them along with iterating throught the array. increment l whenever a match is not found


1) remove duplicates from sorted array: class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        
        l = 1
        
        for r in range(1, len(nums)):
            if nums[r] != nums[r-1]:
                nums[l] = nums[r]
                l+=1
        
        
        return l
        
2)                      LC 27. Remove Element
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        
        l = 0
        
        for r in range(len(nums)):
            if nums[r] != val:
                nums[l] = nums[r]
                l += 1
        
        return l
        
        
 3) LC 977. Squares of a Sorted Array
    
    simplest, but less efficient approach:
    append all squares of the array's numbers and then append them to ans array
    sort the array using .sort() method
    finally return the sorted array:
    
    class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        
        
        ans = []
        
        for val in nums:
            ans.append(val*val)
        
        ans.sort()
        
        return ans
        
     more efficient, o(n) time and space approach: using 2 pointers:
     
     use 2 pointers with the left pointer at the leftmost -ve no and right one on the rightest side
     compare squares of nums as both l and r and check which one's bigger
     append bigger one to ans array
     if used l --> l++
     if used r --> r--
     
     return the array reversed : nums[::-1]
     
 Solution :-
 
 class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        
        #two pointer approach
        
        #intializing left,right pointers
        l = 0
        r = len(nums) - 1
        res = []
        
        #iterating through the while loop
        while l <= r:
            
            #comparing the squares of both +ve and -ve nos
            if (nums[l]*nums[l]) > nums[r]*nums[r]:
                res.append(nums[l]*nums[l])
                l += 1
            else:
                res.append(nums[r]*nums[r])
                r -= 1
        
        return res[::-1] #returning the ans array sorted
 
 
